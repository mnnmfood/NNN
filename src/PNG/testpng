
#include <iostream>
#include <fstream>
#include <cmath>
#include <functional>
#include <chrono>
#include <initializer_list>
#include <random>
#include <vector>

#include <unsupported/Eigen/CXX11/Tensor>
#include "typedefs.h"

#include "pngWrapper.h"
#include "eigen.h"
//#include "activations.h"

using Eigen::Map;
using Eigen::array;
using Eigen::Dynamic;

template<typename T>
void toFile(Tensor<T, 2>& data){
  std::cout << "Shape: " << data.dimension(0);
  std::cout << ", " << data.dimension(1) << "\n";
  std::ofstream file("test.txt");
  if (file.is_open())
  {
    for(int i{0}; i < data.dimension(0); i++){
      for(size_t k{0}; k < data.dimension(1); k++){
        file << static_cast<float>(data(i, k)) << ",";
      }
    }
    file << "0";
  }
}


int main(){
  printFiles();
  Tensor<float, 2> t(2, 10);
  t.setConstant(5);
  t(0, 0) = 6;
  std::cout << t << "\n";
  Tensor<float, 2> tt = transposed(t);
  std::cout << tt << "\n";


  // Read Image
  std::ifstream fpi{"test.png", std::ios::binary};
  png::PNGReader reader(fpi);
  std::cout << reader;
  Tensor<byte, 2> data;
  reader.read(PNG_COLOR_TYPE_GRAY, data);

  std::cout << "Data\n";
  std::cout << data.dimension(0) << ", ";
  std::cout << data.dimension(1) << "\n";
  std::cout << reader;
  std::cout << "Data size: " << data.size() << ", ";
  std::cout << "Total size(bytes): " << reader.total_size << "\n\n";
  
  //std::cout << data;
  // Write Image
  std::ofstream fpo("test_out.png", std::ios::binary);
  png::PNGWriter writer(fpo, data, png::pngInfo(reader.m_info.height, 
                  reader.m_info.width, PNG_COLOR_TYPE_GRAY));
  writer.write(PNG_COLOR_TYPE_GRAY);
  std::cout << writer;

  Tensor<float, 2> sobel(3, 3) ;
  sobel.setValues({{1, 0, -1}, {2, 0, -2}, {1, 0, -1}});
  std::cout << sobel << "\n";
  Tensor<float, 2> dataf = data.cast<float>();
  std::cout << "Dataf\n";
  std::cout << dataf.dimension(0) << ", ";
  std::cout << dataf.dimension(1) << "\n";
  Eigen::array<ptrdiff_t, 2> dims({0, 1}); 
  Tensor<float, 2> result = dataf.convolve(sobel, dims);


  max_normalize_op normalizer(result);
  result = 255 * result.unaryExpr(normalizer).eval();
  toFile<float>(result);

  Tensor<byte, 2> resultb = result.cast<byte>();
  std::cout << resultb.dimension(0) << ", ";
  std::cout << resultb.dimension(1) << "\n";
  std::cout << resultb.size() << "\n";
  std::ofstream fpo2("test_filtered.png", std::ios::binary);
  png::PNGWriter writer2(fpo2, resultb, png::pngInfo(resultb.dimension(0), 
                    resultb.dimension(1), PNG_COLOR_TYPE_GRAY));
  std::cout << writer2;
  writer2.write(PNG_COLOR_TYPE_GRAY);
}